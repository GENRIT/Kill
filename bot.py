import os
import random
import asyncio
import logging
import pickle
from telegram import Update, ReplyKeyboardMarkup, ParseMode
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, ConversationHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = '7305892783:AAEPYSCoF2PQuUxdTToS1zlEYvR9yZv4gjs'

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–ø–ø–∞—Ö
groups = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Å—ã–ª–∫–µ
mailing_data = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECTING_PERCENTAGE, ENTERING_TEXT, SELECTING_GROUP = range(3)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def save_data():
    with open('bot_data.pkl', 'wb') as f:
        pickle.dump((groups, mailing_data), f)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    global groups, mailing_data
    if os.path.exists('bot_data.pkl'):
        with open('bot_data.pkl', 'rb') as f:
            groups, mailing_data = pickle.load(f)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_data()

def start(update: Update, context: CallbackContext) -> None:
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n/mailing - –†–∞—Å—Å—ã–ª–∫–∞\n/groups - –ì—Ä—É–ø–ø—ã")

def show_mailing_options(update: Update, context: CallbackContext) -> int:
    reply_keyboard = [['–í—Å–µ–º', '50%', '10%'], ['üîô –ù–∞–∑–∞–¥']]
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return SELECTING_PERCENTAGE

def ask_for_mailing_text(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    percentage = 100 if text == '–í—Å–µ–º' else int(text.replace('%', ''))
    context.user_data['percentage'] = percentage
    update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ {percentage}% —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:")
    return ENTERING_TEXT

def process_mailing_text(update: Update, context: CallbackContext) -> int:
    mailing_text = update.message.text
    percentage = context.user_data['percentage']
    mailing_data[update.effective_user.id] = {"text": mailing_text, "percentage": percentage}
    save_data()
    reply_keyboard = [['–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É'], ['üîô –ù–∞–∑–∞–¥']]
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return SELECTING_GROUP

def select_group_for_mailing(update: Update, context: CallbackContext) -> int:
    reply_keyboard = [[group_info['title'] for group_id, group_info in groups.items()], ['üîô –ù–∞–∑–∞–¥']]
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return ConversationHandler.END

async def start_mailing(update: Update, context: CallbackContext) -> None:
    group_title = update.message.text
    group_id = next(gid for gid, ginfo in groups.items() if ginfo['title'] == group_title)
    user_id = update.effective_user.id
    
    if user_id not in mailing_data:
        update.message.reply_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    mailing_info = mailing_data[user_id]
    percentage = int(mailing_info["percentage"])
    text = mailing_info["text"]

    update.message.reply_text(f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É {percentage}% —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É...")

    group_info = groups[group_id]
    members = list(group_info['members'])
    num_recipients = int(len(members) * percentage / 100)
    recipients = random.sample(members, num_recipients)

    sent_message = await context.bot.send_message(group_id, text)

    try:
        while True:
            updated_text = "".join(f"[{char}](tg://user?id={recipients[i]})" if i < len(recipients) else char for i, char in enumerate(text))

            await context.bot.edit_message_text(updated_text, group_id, sent_message.message_id, parse_mode=ParseMode.MARKDOWN)
            await asyncio.sleep(0.1)

            if all(char.isalnum() or char.isspace() for char in updated_text):
                break
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    update.message.reply_text("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    del mailing_data[user_id]
    save_data()

def show_groups(update: Update, context: CallbackContext) -> None:
    reply_keyboard = [[group_info['title'] for group_id, group_info in groups.items()], ['üîô –ù–∞–∑–∞–¥']]
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )

def show_group_info(update: Update, context: CallbackContext) -> None:
    group_title = update.message.text
    group_id = next(gid for gid, ginfo in groups.items() if ginfo['title'] == group_title)
    group_info = groups[group_id]
    info_text = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: {group_info['title']}\nID: {group_id}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(group_info['members'])}"
    reply_keyboard = [['üîô –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º']]
    update.message.reply_text(
        info_text,
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )

def handle_my_chat_member(update: Update, context: CallbackContext) -> None:
    new_chat_member = update.my_chat_member.new_chat_member
    if new_chat_member.status == 'administrator':
        group_id = update.effective_chat.id
        groups[group_id] = {
            'title': update.effective_chat.title,
            'members': set(),
            'owner_id': update.effective_user.id
        }
        save_data()
        context.bot.send_message(update.effective_chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        update_group_members(context, group_id)
    elif new_chat_member.status == 'member':
        context.bot.send_message(update.effective_chat.id, "–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

def update_group_members(context: CallbackContext, group_id: int) -> None:
    try:
        members = context.bot.get_chat_member_count(group_id)
        groups[group_id]['members'] = set(range(members))  # –ü—Ä–æ—Å—Ç–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ ID
        save_data()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã {group_id}: {e}")

def handle_new_chat_members(update: Update, context: CallbackContext) -> None:
    group_id = update.effective_chat.id
    if group_id in groups:
        for new_member in update.message.new_chat_members:
            groups[group_id]['members'].add(new_member.id)
        save_data()

def handle_left_chat_member(update: Update, context: CallbackContext) -> None:
    group_id = update.effective_chat.id
    if group_id in groups:
        groups[group_id]['members'].discard(update.message.left_chat_member.id)
        save_data()

def main() -> None:
    updater = Updater(TOKEN)
    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('mailing', show_mailing_options)],
        states={
            SELECTING_PERCENTAGE: [MessageHandler(Filters.regex('^(–í—Å–µ–º|50%|10%)$'), ask_for_mailing_text)],
            ENTERING_TEXT: [MessageHandler(Filters.text & ~Filters.command, process_mailing_text)],
            SELECTING_GROUP: [MessageHandler(Filters.regex('^–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É$'), select_group_for_mailing)]
        },
        fallbacks=[MessageHandler(Filters.regex('^üîô –ù–∞–∑–∞–¥$'), start)]
    )

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(conv_handler)
    dp.add_handler(CommandHandler("groups", show_groups))
    dp.add_handler(MessageHandler(Filters.regex('^üîô –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º$'), show_groups))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, show_group_info))
    dp.add_handler(MessageHandler(Filters.status_update.new_chat_members, handle_new_chat_members))
    dp.add_handler(MessageHandler(Filters.status_update.left_chat_member, handle_left_chat_member))
    dp.add_handler(MessageHandler(Filters.status_update.chat_member, handle_my_chat_member))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()