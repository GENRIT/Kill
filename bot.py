import os
import random
from telebot import TeleBot, types
from telebot.util import smart_split
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = os.environ.get('7305892783:AAEPYSCoF2PQuUxdTToS1zlEYvR9yZv4gjs')
if not TOKEN:
    logger.error("No token provided. Please set the BOT_TOKEN environment variable.")
    exit(1)

bot = TeleBot(TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–ø–ø–∞—Ö
groups = {}

@bot.message_handler(commands=['start'])
def start(message):
    try:
        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞", callback_data="mailing"))
        markup.row(types.InlineKeyboardButton("–ì—Ä—É–ø–ø—ã", callback_data="groups"))
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    except Exception as e:
        logger.error(f"Error in start function: {e}")

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    try:
        if call.data == "mailing":
            show_mailing_options(call.message)
        elif call.data == "groups":
            show_groups(call.message)
        elif call.data.startswith("mailing_"):
            percentage = call.data.split("_")[1]
            start_mailing(call.message, percentage)
        elif call.data == "back":
            start(call.message)
        elif call.data.startswith("group_"):
            group_id = int(call.data.split("_")[1])
            show_group_info(call.message, group_id)
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Error in callback_query function: {e}")

def show_mailing_options(message):
    try:
        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton("–í—Å–µ–º", callback_data="mailing_100"))
        markup.row(types.InlineKeyboardButton("50%", callback_data="mailing_50"))
        markup.row(types.InlineKeyboardButton("10%", callback_data="mailing_10"))
        markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏:", message.chat.id, message.message_id, reply_markup=markup)
    except Exception as e:
        logger.error(f"Error in show_mailing_options function: {e}")

def start_mailing(message, percentage):
    try:
        bot.edit_message_text(f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É {percentage}% —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...", message.chat.id, message.message_id)
        for group_id, group_info in groups.items():
            members = list(group_info['members'])
            num_recipients = int(len(members) * int(percentage) / 100)
            recipients = random.sample(members, min(num_recipients, len(members)))
            for user_id in recipients:
                try:
                    bot.send_message(user_id, f"–†–∞—Å—Å—ã–ª–∫–∞: –ü—Ä–∏–≤–µ—Ç, —É—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä—É–ø–ø—ã {group_info['title']}! –í–∞—à ID: {user_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        bot.edit_message_text("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", message.chat.id, message.message_id)
    except Exception as e:
        logger.error(f"Error in start_mailing function: {e}")

def show_groups(message):
    try:
        markup = types.InlineKeyboardMarkup()
        if not groups:
            bot.edit_message_text("–£ –±–æ—Ç–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø, –≥–¥–µ –æ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.", message.chat.id, message.message_id)
            return
        for group_id, group_info in groups.items():
            markup.row(types.InlineKeyboardButton(group_info['title'], callback_data=f"group_{group_id}"))
        markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", message.chat.id, message.message_id, reply_markup=markup)
    except Exception as e:
        logger.error(f"Error in show_groups function: {e}")

def show_group_info(message, group_id):
    try:
        group_info = groups.get(group_id)
        if not group_info:
            bot.edit_message_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", message.chat.id, message.message_id)
            return
        info_text = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: {group_info['title']}\nID: {group_id}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(group_info['members'])}"
        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º", callback_data="groups"))
        bot.edit_message_text(info_text, message.chat.id, message.message_id, reply_markup=markup)
    except Exception as e:
        logger.error(f"Error in show_group_info function: {e}")

@bot.my_chat_member_handler()
def handle_my_chat_member(message):
    try:
        if message.new_chat_member.status == 'administrator':
            group_id = message.chat.id
            groups[group_id] = {
                'title': message.chat.title,
                'members': set()
            }
            bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        elif message.new_chat_member.status == 'member':
            bot.send_message(message.chat.id, "–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    except Exception as e:
        logger.error(f"Error in handle_my_chat_member function: {e}")

@bot.message_handler(content_types=['new_chat_members'])
def handle_new_chat_members(message):
    try:
        group_id = message.chat.id
        if group_id in groups:
            for new_member in message.new_chat_members:
                groups[group_id]['members'].add(new_member.id)
    except Exception as e:
        logger.error(f"Error in handle_new_chat_members function: {e}")

@bot.message_handler(content_types=['left_chat_member'])
def handle_left_chat_member(message):
    try:
        group_id = message.chat.id
        if group_id in groups:
            groups[group_id]['members'].discard(message.left_chat_member.id)
    except Exception as e:
        logger.error(f"Error in handle_left_chat_member function: {e}")

if __name__ == '__main__':
    logger.info("Starting bot...")
    bot.polling(none_stop=True, interval=0, timeout=20)