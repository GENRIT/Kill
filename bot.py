import os
import random
from telebot import TeleBot, types
from telebot.util import smart_split
import logging
import pickle

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = '7305892783:AAEPYSCoF2PQuUxdTToS1zlEYvR9yZv4gjs'
bot = TeleBot(TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–ø–ø–∞—Ö
groups = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Å—ã–ª–∫–µ
mailing_data = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def save_data():
    with open('bot_data.pkl', 'wb') as f:
        pickle.dump((groups, mailing_data), f)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    global groups, mailing_data
    if os.path.exists('bot_data.pkl'):
        with open('bot_data.pkl', 'rb') as f:
            groups, mailing_data = pickle.load(f)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_data()

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞", callback_data="mailing"))
    markup.row(types.InlineKeyboardButton("–ì—Ä—É–ø–ø—ã", callback_data="groups"))
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == "mailing":
        show_mailing_options(call.message)
    elif call.data == "groups":
        show_groups(call.message)
    elif call.data.startswith("mailing_"):
        percentage = call.data.split("_")[1]
        ask_for_mailing_text(call.message, percentage)
    elif call.data == "back":
        start(call.message)
    elif call.data.startswith("group_"):
        group_id = int(call.data.split("_")[1])
        show_group_info(call.message, group_id)
    elif call.data == "add_media":
        ask_for_media(call.message)
    elif call.data == "add_button":
        ask_for_button(call.message)
    elif call.data == "start_mailing":
        select_group_for_mailing(call.message)
    elif call.data == "preview_post":
        preview_post(call.message)
    elif call.data.startswith("select_group_"):
        group_id = int(call.data.split("_")[2])
        start_mailing(call.message, group_id)

def show_mailing_options(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("–í—Å–µ–º", callback_data="mailing_100"))
    markup.row(types.InlineKeyboardButton("50%", callback_data="mailing_50"))
    markup.row(types.InlineKeyboardButton("10%", callback_data="mailing_10"))
    markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏:", message.chat.id, message.message_id, reply_markup=markup)

def ask_for_mailing_text(message, percentage):
    bot.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ {percentage}% —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", message.chat.id, message.message_id)
    bot.register_next_step_handler(message, process_mailing_text, percentage)

def process_mailing_text(message, percentage):
    mailing_text = message.text
    mailing_data[message.chat.id] = {"text": mailing_text, "percentage": percentage}
    save_data()
    show_mailing_actions(message)

def show_mailing_actions(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π", callback_data="add_button"))
    markup.row(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞", callback_data="add_media"))
    markup.row(types.InlineKeyboardButton("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="preview_post"))
    markup.row(types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="start_mailing"))
    markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

def ask_for_button(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Ç–µ–∫—Å—Ç|—Å—Å—ã–ª–∫–∞")
    bot.register_next_step_handler(message, process_button)

def process_button(message):
    try:
        text, url = message.text.split('|')
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text.strip(), url=url.strip()))
        mailing_data[message.chat.id]['markup'] = markup
        save_data()
        bot.send_message(message.chat.id, "–ö–Ω–æ–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        show_mailing_actions(message)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        ask_for_button(message)

def ask_for_media(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("–§–æ—Ç–æ", callback_data="media_photo"))
    markup.row(types.InlineKeyboardButton("–í–∏–¥–µ–æ", callback_data="media_video"))
    markup.row(types.InlineKeyboardButton("GIF", callback_data="media_gif"))
    markup.row(types.InlineKeyboardButton("–°—Ç–∏–∫–µ—Ä", callback_data="media_sticker"))
    markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_mailing"))
    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ–¥–∏–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", message.chat.id, message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("media_"))
def handle_media_type(call):
    media_type = call.data.split("_")[1]
    bot.answer_callback_query(call.id)
    bot.edit_message_text(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ {media_type} –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ —Ä–∞—Å—Å—ã–ª–∫–µ:", call.message.chat.id, call.message.message_id)
    bot.register_next_step_handler(call.message, process_media, media_type)

def process_media(message, media_type):
    if message.content_type == media_type or (media_type == 'gif' and message.content_type == 'document'):
        if media_type == 'photo':
            mailing_data[message.chat.id]["media"] = message.photo[-1].file_id
        elif media_type == 'video':
            mailing_data[message.chat.id]["media"] = message.video.file_id
        elif media_type == 'gif':
            mailing_data[message.chat.id]["media"] = message.document.file_id
        elif media_type == 'sticker':
            mailing_data[message.chat.id]["media"] = message.sticker.file_id
        save_data()
        bot.send_message(message.chat.id, f"{media_type.capitalize()} –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Ä–∞—Å—Å—ã–ª–∫–µ.")
        show_mailing_actions(message)
    else:
        bot.send_message(message.chat.id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {media_type}.")
        ask_for_media(message)

def preview_post(message):
    chat_id = message.chat.id
    if chat_id not in mailing_data:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    mailing_info = mailing_data[chat_id]
    text = mailing_info["text"]
    markup = mailing_info.get("markup")
    media = mailing_info.get("media")

    if media:
        if "photo" in media:
            bot.send_photo(chat_id, media, caption=text, reply_markup=markup)
        elif "video" in media:
            bot.send_video(chat_id, media, caption=text, reply_markup=markup)
        elif "animation" in media:
            bot.send_animation(chat_id, media, caption=text, reply_markup=markup)
        elif "sticker" in media:
            bot.send_sticker(chat_id, media)
            if text or markup:
                bot.send_message(chat_id, text, reply_markup=markup)
    else:
        bot.send_message(chat_id, text, reply_markup=markup)

    show_mailing_actions(message)

def select_group_for_mailing(message):
    markup = types.InlineKeyboardMarkup()
    for group_id, group_info in groups.items():
        markup.row(types.InlineKeyboardButton(group_info['title'], callback_data=f"select_group_{group_id}"))
    markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", message.chat.id, message.message_id, reply_markup=markup)

def start_mailing(message, group_id):
    chat_id = message.chat.id
    if chat_id not in mailing_data:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    mailing_info = mailing_data[chat_id]
    percentage = int(mailing_info["percentage"])
    text = mailing_info["text"]
    markup = mailing_info.get("markup")
    media = mailing_info.get("media")

    bot.send_message(chat_id, f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É {percentage}% —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É...")

    group_info = groups[group_id]
    members = list(group_info['members'])
    num_recipients = int(len(members) * percentage / 100)
    recipients = random.sample(members, num_recipients)

    for user_id in recipients:
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            user_text = f"{text}\n\n{user_id}"
            if media:
                if "photo" in media:
                    bot.send_photo(group_id, media, caption=user_text, reply_markup=markup)
                elif "video" in media:
                    bot.send_video(group_id, media, caption=user_text, reply_markup=markup)
                elif "animation" in media:
                    bot.send_animation(group_id, media, caption=user_text, reply_markup=markup)
                elif "sticker" in media:
                    bot.send_sticker(group_id, media)
                    if user_text or markup:
                        bot.send_message(group_id, user_text, reply_markup=markup)
            else:
                bot.send_message(group_id, user_text, reply_markup=markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É {group_id}: {e}")

    bot.send_message(chat_id, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    del mailing_data[chat_id]
    save_data()

def show_groups(message):
    markup = types.InlineKeyboardMarkup()
    for group_id, group_info in groups.items():
        markup.row(types.InlineKeyboardButton(group_info['title'], callback_data=f"group_{group_id}"))
    markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", message.chat.id, message.message_id, reply_markup=markup)

def show_group_info(message, group_id):
    group_info = groups[group_id]
    info_text = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: {group_info['title']}\nID: {group_id}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(group_info['members'])}"
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É", callback_data=f"send_to_group_{group_id}"))
    markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º", callback_data="groups"))
    bot.edit_message_text(info_text, message.chat.id, message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("send_to_group_"))
def ask_for_group_message(call):
    group_id = int(call.data.split("_")[3])
    bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É:", call.message.chat.id, call.message.message_id)
    bot.register_next_step_handler(call.message, send_message_to_group, group_id)

def send_message_to_group(message, group_id):
    try:
        bot.send_message(group_id, message.text)
        bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É!")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {e}")

@bot.my_chat_member_handler()
def handle_my_chat_member(message):
    if message.new_chat_member.status == 'administrator':
        group_id = message.chat.id
        groups[group_id] = {
            'title': message.chat.title,
            'members': set(),
            'owner_id': message.from_user.id
        }
        save_data()
        bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        update_group_members(group_id)
    elif message.new_chat_member.status == 'member':
        bot.send_message(message.chat.id, "–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

def update_group_members(group_id):
    try:
        members = bot.get_chat_members_count(group_id)
        groups[group_id]['members'] = set(range(members))  # –ü—Ä–æ—Å—Ç–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ ID
        save_data()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã {group_id}: {e}")

@bot.message_handler(content_types=['new_chat_members'])
def handle_new_chat_members(message):
    group_id = message.chat.id
    if group_id in groups:
        for new_member in message.new_chat_members:
            groups[group_id]['members'].add(new_member.id)
        save_data()

@bot.message_handler(content_types=['left_chat_member'])
def handle_left_chat_member(message):
    group_id = message.chat.id
    if group_id in groups:
        groups[group_id]['members'].discard(message.left_chat_member.id)
        save_data()

if __name__ == '__main__':
    bot.polling(none_stop=True)