import os
import random
from telebot import TeleBot, types
from telebot.util import smart_split
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = os.environ.get('7305892783:AAEPYSCoF2PQuUxdTToS1zlEYvR9yZv4gjs')
bot = TeleBot(TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–ø–ø–∞—Ö
groups = {}

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞", callback_data="mailing"))
    markup.row(types.InlineKeyboardButton("–ì—Ä—É–ø–ø—ã", callback_data="groups"))
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == "mailing":
        show_mailing_options(call.message)
    elif call.data == "groups":
        show_groups(call.message)
    elif call.data.startswith("mailing_"):
        percentage = call.data.split("_")[1]
        ask_for_mailing_text(call.message, percentage)
    elif call.data == "back":
        start(call.message)
    elif call.data.startswith("group_"):
        group_id = int(call.data.split("_")[1])
        show_group_info(call.message, group_id)

def show_mailing_options(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("–í—Å–µ–º", callback_data="mailing_100"))
    markup.row(types.InlineKeyboardButton("50%", callback_data="mailing_50"))
    markup.row(types.InlineKeyboardButton("10%", callback_data="mailing_10"))
    markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏:", message.chat.id, message.message_id, reply_markup=markup)

def ask_for_mailing_text(message, percentage):
    bot.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ {percentage}% —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", message.chat.id, message.message_id)
    bot.register_next_step_handler(message, process_mailing_text, percentage)

def process_mailing_text(message, percentage):
    mailing_text = message.text
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π", callback_data=f"add_button_{percentage}"))
    markup.row(types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data=f"start_mailing_{percentage}"))
    bot.send_message(message.chat.id, "–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—É—á–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("add_button_"))
def add_button_to_mailing(call):
    percentage = call.data.split("_")[2]
    bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏ —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ '—Ç–µ–∫—Å—Ç|—Å—Å—ã–ª–∫–∞':", call.message.chat.id, call.message.message_id)
    bot.register_next_step_handler(call.message, process_button_info, percentage)

def process_button_info(message, percentage):
    try:
        button_text, button_url = message.text.split("|")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text=button_text.strip(), url=button_url.strip()))
        bot.send_message(message.chat.id, "–ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É?", reply_markup=markup)
        bot.register_next_step_handler(message, start_mailing_with_button, percentage, markup)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        add_button_to_mailing(types.CallbackQuery(data=f"add_button_{percentage}", message=message))

def start_mailing_with_button(message, percentage, markup):
    if message.text.lower() == "–¥–∞":
        start_mailing(message, percentage, markup)
    else:
        bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("start_mailing_"))
def start_mailing_callback(call):
    percentage = call.data.split("_")[2]
    start_mailing(call.message, percentage)

def start_mailing(message, percentage, markup=None):
    bot.send_message(message.chat.id, f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É {percentage}% —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
    for group_id, group_info in groups.items():
        members = list(group_info['members'])
        num_recipients = int(len(members) * int(percentage) / 100)
        recipients = random.sample(members, num_recipients)
        for user_id in recipients:
            try:
                if markup:
                    bot.send_message(user_id, f"–†–∞—Å—Å—ã–ª–∫–∞: –ü—Ä–∏–≤–µ—Ç, —É—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä—É–ø–ø—ã {group_info['title']}! –í–∞—à ID: {user_id}", reply_markup=markup)
                else:
                    bot.send_message(user_id, f"–†–∞—Å—Å—ã–ª–∫–∞: –ü—Ä–∏–≤–µ—Ç, —É—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä—É–ø–ø—ã {group_info['title']}! –í–∞—à ID: {user_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

def show_groups(message):
    markup = types.InlineKeyboardMarkup()
    for group_id, group_info in groups.items():
        markup.row(types.InlineKeyboardButton(group_info['title'], callback_data=f"group_{group_id}"))
    markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", message.chat.id, message.message_id, reply_markup=markup)

def show_group_info(message, group_id):
    group_info = groups[group_id]
    info_text = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: {group_info['title']}\nID: {group_id}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(group_info['members'])}"
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É", callback_data=f"send_to_group_{group_id}"))
    markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º", callback_data="groups"))
    bot.edit_message_text(info_text, message.chat.id, message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("send_to_group_"))
def ask_for_group_message(call):
    group_id = int(call.data.split("_")[3])
    bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É:", call.message.chat.id, call.message.message_id)
    bot.register_next_step_handler(call.message, send_message_to_group, group_id)

def send_message_to_group(message, group_id):
    try:
        bot.send_message(group_id, message.text)
        bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É!")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {e}")

@bot.my_chat_member_handler()
def handle_my_chat_member(message):
    if message.new_chat_member.status == 'administrator':
        group_id = message.chat.id
        groups[group_id] = {
            'title': message.chat.title,
            'members': set(),
            'owner_id': message.from_user.id
        }
        bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    elif message.new_chat_member.status == 'member':
        bot.send_message(message.chat.id, "–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

@bot.message_handler(content_types=['new_chat_members'])
def handle_new_chat_members(message):
    group_id = message.chat.id
    if group_id in groups:
        for new_member in message.new_chat_members:
            groups[group_id]['members'].add(new_member.id)

@bot.message_handler(content_types=['left_chat_member'])
def handle_left_chat_member(message):
    group_id = message.chat.id
    if group_id in groups:
        groups[group_id]['members'].discard(message.left_chat_member.id)

if __name__ == '__main__':
    bot.polling(none_stop=True)