import os
import random
import asyncio
from telebot.async_telebot import AsyncTeleBot
from telebot import types
import logging
import pickle

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = '7305892783:AAEPYSCoF2PQuUxdTToS1zlEYvR9yZv4gjs'
bot = AsyncTeleBot(TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–ø–ø–∞—Ö
groups = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Å—ã–ª–∫–µ
mailing_data = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def save_data():
    with open('bot_data.pkl', 'wb') as f:
        pickle.dump((groups, mailing_data), f)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    global groups, mailing_data
    if os.path.exists('bot_data.pkl'):
        with open('bot_data.pkl', 'rb') as f:
            groups, mailing_data = pickle.load(f)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_data()

@bot.message_handler(commands=['start'])
async def start(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞", callback_data="mailing"))
    markup.row(types.InlineKeyboardButton("–ì—Ä—É–ø–ø—ã", callback_data="groups"))
    await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
async def callback_query(call):
    if call.data == "mailing":
        await show_mailing_options(call.message)
    elif call.data == "groups":
        await show_groups(call.message)
    elif call.data.startswith("mailing_"):
        percentage = call.data.split("_")[1]
        await ask_for_mailing_text(call.message, percentage)
    elif call.data == "back":
        await start(call.message)
    elif call.data.startswith("group_"):
        group_id = int(call.data.split("_")[1])
        await show_group_info(call.message, group_id)
    elif call.data == "start_mailing":
        await select_group_for_mailing(call.message)
    elif call.data.startswith("select_group_"):
        group_id = int(call.data.split("_")[2])
        await start_mailing(call.message, group_id)

async def show_mailing_options(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("–í—Å–µ–º", callback_data="mailing_100"))
    markup.row(types.InlineKeyboardButton("50%", callback_data="mailing_50"))
    markup.row(types.InlineKeyboardButton("10%", callback_data="mailing_10"))
    markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
    await bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏:", message.chat.id, message.message_id, reply_markup=markup)

async def ask_for_mailing_text(message, percentage):
    await bot.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ {percentage}% —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", message.chat.id, message.message_id)
    bot.register_next_step_handler(message, process_mailing_text, percentage)

async def process_mailing_text(message, percentage):
    mailing_text = message.text
    mailing_data[message.chat.id] = {"text": mailing_text, "percentage": percentage}
    save_data()
    await show_mailing_actions(message)

async def show_mailing_actions(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="start_mailing"))
    markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

async def select_group_for_mailing(message):
    markup = types.InlineKeyboardMarkup()
    for group_id, group_info in groups.items():
        markup.row(types.InlineKeyboardButton(group_info['title'], callback_data=f"select_group_{group_id}"))
    markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
    await bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", message.chat.id, message.message_id, reply_markup=markup)

async def start_mailing(message, group_id):
    chat_id = message.chat.id
    if chat_id not in mailing_data:
        await bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    mailing_info = mailing_data[chat_id]
    percentage = int(mailing_info["percentage"])
    text = mailing_info["text"]

    await bot.send_message(chat_id, f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É {percentage}% —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É...")

    group_info = groups[group_id]
    members = list(group_info['members'])
    num_recipients = int(len(members) * percentage / 100)
    recipients = random.sample(members, num_recipients)

    sent_message = await bot.send_message(group_id, text)
    
    while True:
        for i, user_id in enumerate(recipients):
            updated_text = ""
            for j, char in enumerate(text):
                if j < len(recipients):
                    updated_text += f"[{char}](tg://user?id={recipients[j]})"
                else:
                    updated_text += char
            
            try:
                await bot.edit_message_text(updated_text, group_id, sent_message.message_id, parse_mode='Markdown')
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ {group_id}: {e}")
            
            await asyncio.sleep(0.1)
        
        if i == len(recipients) - 1:
            break
    
    await bot.edit_message_text(text, group_id, sent_message.message_id)
    await bot.send_message(chat_id, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    del mailing_data[chat_id]
    save_data()

async def show_groups(message):
    markup = types.InlineKeyboardMarkup()
    for group_id, group_info in groups.items():
        markup.row(types.InlineKeyboardButton(group_info['title'], callback_data=f"group_{group_id}"))
    markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
    await bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", message.chat.id, message.message_id, reply_markup=markup)

async def show_group_info(message, group_id):
    group_info = groups[group_id]
    info_text = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: {group_info['title']}\nID: {group_id}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(group_info['members'])}"
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º", callback_data="groups"))
    await bot.edit_message_text(info_text, message.chat.id, message.message_id, reply_markup=markup)

@bot.my_chat_member_handler()
async def handle_my_chat_member(message):
    if message.new_chat_member.status == 'administrator':
        group_id = message.chat.id
        groups[group_id] = {
            'title': message.chat.title,
            'members': set(),
            'owner_id': message.from_user.id
        }
        save_data()
        await bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        await update_group_members(group_id)
    elif message.new_chat_member.status == 'member':
        await bot.send_message(message.chat.id, "–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

async def update_group_members(group_id):
    try:
        members = await bot.get_chat_members_count(group_id)
        groups[group_id]['members'] = set(range(members))  # –ü—Ä–æ—Å—Ç–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ ID
        save_data()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã {group_id}: {e}")

@bot.message_handler(content_types=['new_chat_members'])
async def handle_new_chat_members(message):
    group_id = message.chat.id
    if group_id in groups:
        for new_member in message.new_chat_members:
            groups[group_id]['members'].add(new_member.id)
        save_data()

@bot.message_handler(content_types=['left_chat_member'])
async def handle_left_chat_member(message):
    group_id = message.chat.id
    if group_id in groups:
        groups[group_id]['members'].discard(message.left_chat_member.id)
        save_data()

if __name__ == '__main__':
    asyncio.run(bot.polling())